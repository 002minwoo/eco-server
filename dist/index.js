"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("dotenv/config");
var _models = require("./models");
var _api = require("./api");
var _config2 = _interopRequireDefault(require("./config"));
var _app = _interopRequireDefault(require("./app"));
require("./errors");
var _scheduler = _interopRequireDefault(require("./scheduler"));
var _path = _interopRequireDefault(require("path"));
var _cors = _interopRequireDefault(require("cors"));
var _dotenv = _interopRequireDefault(require("dotenv"));
// import kue from './kue';

_dotenv["default"].config();
global.appRoot = _path["default"].resolve(__dirname);
var PORT = _config2["default"].app.port;
var app = _app["default"].setup(_config2["default"]);

/*cors handling*/
app.use((0, _cors["default"])());

/* Route handling */
app.use('/api', _api.restRouter);
// app.use('/', webRouter);

app.use(function (error, req, res, next) {
  if (!(error instanceof RequestError)) {
    error = new RequestError('Some Error Occurred', 500, error.message);
  }
  error.status = error.status || 500;
  res.status(error.status);
  var contype = req.headers['content-type'];
  var json = !(!contype || contype.indexOf('application/json') !== 0);
  if (json) {
    return res.json({
      errors: error.errorList
    });
  } else {
    res.render(error.status.toString(), {
      layout: null
    });
  }
});

// kue.init();
/* Database Connection */
_models.db.sequelize.authenticate().then(function () {
  console.log('Nice! Database looks fine');
  _scheduler["default"].init();
})["catch"](function (err) {
  console.log(err, "Something went wrong with the Database Update!");
});

/* Start Listening service */
app.listen(PORT, function () {
  console.log("Server is running at PORT http://localhost:".concat(PORT));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX21vZGVscyIsIl9hcGkiLCJfY29uZmlnMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXBwIiwiX3NjaGVkdWxlciIsIl9wYXRoIiwiX2NvcnMiLCJfZG90ZW52IiwiZG90ZW52IiwiY29uZmlnIiwiZ2xvYmFsIiwiYXBwUm9vdCIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiUE9SVCIsImFwcCIsInBvcnQiLCJhcHBNYW5hZ2VyIiwic2V0dXAiLCJ1c2UiLCJjb3JzIiwicmVzdFJvdXRlciIsImVycm9yIiwicmVxIiwicmVzIiwibmV4dCIsIlJlcXVlc3RFcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJjb250eXBlIiwiaGVhZGVycyIsImpzb24iLCJpbmRleE9mIiwiZXJyb3JzIiwiZXJyb3JMaXN0IiwicmVuZGVyIiwidG9TdHJpbmciLCJsYXlvdXQiLCJkYiIsInNlcXVlbGl6ZSIsImF1dGhlbnRpY2F0ZSIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwic2NoZWR1bGVyIiwiaW5pdCIsImVyciIsImxpc3RlbiIsImNvbmNhdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2RvdGVudi9jb25maWcnO1xuaW1wb3J0IHsgZGIgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyByZXN0Um91dGVyIH0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgYXBwTWFuYWdlciBmcm9tICcuL2FwcCc7XG4vLyBpbXBvcnQga3VlIGZyb20gJy4va3VlJztcbmltcG9ydCAnLi9lcnJvcnMnO1xuaW1wb3J0IHNjaGVkdWxlciBmcm9tICcuL3NjaGVkdWxlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXG5kb3RlbnYuY29uZmlnKClcbmdsb2JhbC5hcHBSb290ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSk7XG5cbmNvbnN0IFBPUlQgPSBjb25maWcuYXBwLnBvcnQ7XG5jb25zdCBhcHAgPSBhcHBNYW5hZ2VyLnNldHVwKGNvbmZpZyk7XG5cbi8qY29ycyBoYW5kbGluZyovXG5hcHAudXNlKGNvcnMoKSk7XG5cbi8qIFJvdXRlIGhhbmRsaW5nICovXG5hcHAudXNlKCcvYXBpJywgcmVzdFJvdXRlcik7XG4vLyBhcHAudXNlKCcvJywgd2ViUm91dGVyKTtcblxuYXBwLnVzZSgoZXJyb3IsIHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cdGlmICghKGVycm9yIGluc3RhbmNlb2YgUmVxdWVzdEVycm9yKSkge1xuXHRcdGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcignU29tZSBFcnJvciBPY2N1cnJlZCcsIDUwMCwgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuXHRcdGVycm9yLnN0YXR1cyA9IGVycm9yLnN0YXR1cyB8fCA1MDA7XG5cdHJlcy5zdGF0dXMoZXJyb3Iuc3RhdHVzKTtcblx0bGV0IGNvbnR5cGUgPSByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ107XG5cdHZhciBqc29uID0gISghY29udHlwZSB8fCBjb250eXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSAhPT0gMCk7XG5cdGlmIChqc29uKSB7XG5cdFx0cmV0dXJuIHJlcy5qc29uKHsgZXJyb3JzOiBlcnJvci5lcnJvckxpc3QgfSk7XG5cdH0gZWxzZSB7XG5cdFx0cmVzLnJlbmRlcihlcnJvci5zdGF0dXMudG9TdHJpbmcoKSwge2xheW91dDogbnVsbH0pXG5cdH1cbn0pO1xuXG4vLyBrdWUuaW5pdCgpO1xuLyogRGF0YWJhc2UgQ29ubmVjdGlvbiAqL1xuZGIuc2VxdWVsaXplLmF1dGhlbnRpY2F0ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRjb25zb2xlLmxvZygnTmljZSEgRGF0YWJhc2UgbG9va3MgZmluZScpO1xuXHRzY2hlZHVsZXIuaW5pdCgpO1xufSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRjb25zb2xlLmxvZyhlcnIsIFwiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGUgRGF0YWJhc2UgVXBkYXRlIVwiKVxufSk7XG5cblxuLyogU3RhcnQgTGlzdGVuaW5nIHNlcnZpY2UgKi9cbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuXHRjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgYXQgUE9SVCBodHRwOi8vbG9jYWxob3N0OiR7UE9SVH1gKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQUEsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLElBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLElBQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUVBQSxPQUFBO0FBQ0EsSUFBQU0sVUFBQSxHQUFBRixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU8sS0FBQSxHQUFBSCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVEsS0FBQSxHQUFBSixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVMsT0FBQSxHQUFBTCxzQkFBQSxDQUFBSixPQUFBO0FBTEE7O0FBTUFVLGtCQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0FBQ2ZDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxnQkFBSSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsQ0FBQztBQUV4QyxJQUFNQyxJQUFJLEdBQUdOLG1CQUFNLENBQUNPLEdBQUcsQ0FBQ0MsSUFBSTtBQUM1QixJQUFNRCxHQUFHLEdBQUdFLGVBQVUsQ0FBQ0MsS0FBSyxDQUFDVixtQkFBTSxDQUFDOztBQUVwQztBQUNBTyxHQUFHLENBQUNJLEdBQUcsQ0FBQyxJQUFBQyxnQkFBSSxFQUFDLENBQUMsQ0FBQzs7QUFFZjtBQUNBTCxHQUFHLENBQUNJLEdBQUcsQ0FBQyxNQUFNLEVBQUVFLGVBQVUsQ0FBQztBQUMzQjs7QUFFQU4sR0FBRyxDQUFDSSxHQUFHLENBQUMsVUFBQ0csS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFLO0VBQ2xDLElBQUksRUFBRUgsS0FBSyxZQUFZSSxZQUFZLENBQUMsRUFBRTtJQUNyQ0osS0FBSyxHQUFHLElBQUlJLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUVKLEtBQUssQ0FBQ0ssT0FBTyxDQUFDO0VBQ2pFO0VBQ0ZMLEtBQUssQ0FBQ00sTUFBTSxHQUFHTixLQUFLLENBQUNNLE1BQU0sSUFBSSxHQUFHO0VBQ25DSixHQUFHLENBQUNJLE1BQU0sQ0FBQ04sS0FBSyxDQUFDTSxNQUFNLENBQUM7RUFDeEIsSUFBSUMsT0FBTyxHQUFHTixHQUFHLENBQUNPLE9BQU8sQ0FBQyxjQUFjLENBQUM7RUFDekMsSUFBSUMsSUFBSSxHQUFHLEVBQUUsQ0FBQ0YsT0FBTyxJQUFJQSxPQUFPLENBQUNHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUNuRSxJQUFJRCxJQUFJLEVBQUU7SUFDVCxPQUFPUCxHQUFHLENBQUNPLElBQUksQ0FBQztNQUFFRSxNQUFNLEVBQUVYLEtBQUssQ0FBQ1k7SUFBVSxDQUFDLENBQUM7RUFDN0MsQ0FBQyxNQUFNO0lBQ05WLEdBQUcsQ0FBQ1csTUFBTSxDQUFDYixLQUFLLENBQUNNLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDLENBQUMsRUFBRTtNQUFDQyxNQUFNLEVBQUU7SUFBSSxDQUFDLENBQUM7RUFDcEQ7QUFDRCxDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBQyxVQUFFLENBQUNDLFNBQVMsQ0FBQ0MsWUFBWSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFlBQVk7RUFDNUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJCQUEyQixDQUFDO0VBQ3hDQyxxQkFBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUMsU0FBTSxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUN2QkosT0FBTyxDQUFDQyxHQUFHLENBQUNHLEdBQUcsRUFBRSxnREFBZ0QsQ0FBQztBQUNuRSxDQUFDLENBQUM7O0FBR0Y7QUFDQS9CLEdBQUcsQ0FBQ2dDLE1BQU0sQ0FBQ2pDLElBQUksRUFBRSxZQUFNO0VBQ3RCNEIsT0FBTyxDQUFDQyxHQUFHLCtDQUFBSyxNQUFBLENBQStDbEMsSUFBSSxDQUFFLENBQUM7QUFDbEUsQ0FBQyxDQUFDIn0=